#!/usr/bin/env bash
# usage: bin/compile <build_dir> <cache_dir> <env_dir>

set -o errexit
set -o pipefail

if [ -n "${BUILDPACK_DEBUG}" ]; then
    set -o xtrace
fi

build_dir="${1:-}"
cache_dir="${2:-}"
env_dir="${3:-}"
base_dir="$( cd -P "$( dirname "${0}" )" && pwd )"
buildpack_dir="$( readlink -f "${base_dir}/.." )"
tmp_dir="$( mktemp --tmpdir="/tmp" --directory "keycloak-XXXX" )"

readonly build_dir
readonly cache_dir
readonly env_dir
readonly base_dir
readonly buildpack_dir
readonly tmp_dir



source "${buildpack_dir}/bin/fn.sh"


# * * *


start "Installing JVM"

readonly jvm_version="${JAVA_VERSION:-17}"
readonly jvm_url="https://buildpacks-repository.s3.eu-central-1.amazonaws.com/jvm-common.tar.xz"

mkdir -p /tmp/jvm-common
curl --silent --location "${jvm_url}" \
    | tar xJm -C /tmp/jvm-common --strip-components=1

source /tmp/jvm-common/bin/util
source /tmp/jvm-common/bin/java

install_java "${build_dir}" "${jvm_version}"

success


# * * *


start "Installing Keycloak"

readonly keycloak_db_engine="${KC_DB:-postgres}"

# Version
keycloak_default_version="$( cat "${buildpack_dir}/VERSION" )"
keycloak_version="${KEYCLOAK_VERSION:-"${keycloak_default_version}"}"

if [ -z "${keycloak_version}" ]; then
    err "Could not retrieve Keycloak version."
    info "Please use the KEYCLOAK_VERSION environment variable to specify the version to use."
    failure
else
    info "Using Keycloak version ${keycloak_version}."
fi

readonly keycloak_dir="${build_dir}/keycloak"
readonly dist="keycloak-${keycloak_version}.tar.gz"
readonly cache_file="${cache_dir}/${dist}"
readonly package_url="https://github.com/keycloak/keycloak/releases/download/${keycloak_version}/${dist}"
readonly checksum_url="${package_url}.sha1"

mkdir -p "${tmp_dir}"

if [ -d "${keycloak_dir}" ]; then
    err "Keycloak is already installed in ${keycloak_dir}."
    failure
else
    if [ -f "${cache_file}" ]
    then
        info "Found file in cache."
        do_start "Checking validity"

        if check_cached_file "${cache_file}" "${checksum_url}"
        then
            do_finish
        else
            do_fail
            err "File in cache is invalid, it has been removed."
        fi
    fi

    if [ ! -f "${cache_file}" ]
    then
        do_start "Downloading"

        if  download "${package_url}" "${checksum_url}" "${cache_file}"
        then
            do_finish
        else
            do_fail
            err "An error occured while downloading. Aborting."
            failure
        fi
    fi


    do_start "Extracting"

    if tar \
        --extract \
        --file="${cache_file}" \
        --directory="${tmp_dir}" \
        2>/dev/null
    then
        do_finish
    else
        do_fail
        err "An error occured while extracting the archive. Aborting."
        failure
    fi

    do_start "Installing"

    if mv "${tmp_dir}/keycloak-${keycloak_version}" "${keycloak_dir}" \
        2>/dev/null
    then
        do_finish
    else
        do_fail
        err "An error occured while installing the files. Aborting."
        failure
    fi
fi

success


# * * *


# start "Installing Keycloak providers"
# success


# * * *


# start "Installing Keycloak templates"
# success


# * * *


start "Building environment"


host="$( echo "${SCALINGO_POSTGRESQL_URL}" | cut -d "@" -f2 | cut -d ":" -f1 )"
port="$( echo "${SCALINGO_POSTGRESQL_URL}" | cut -d ":" -f4 | cut -d "/" -f1 )"
username="$( echo "${SCALINGO_POSTGRESQL_URL}" | cut -d "/" -f3 | cut -d ":" -f1 )"
password="$( echo "${SCALINGO_POSTGRESQL_URL}" | cut -d "@" -f1 | cut -d ":" -f3 )"
database="$( echo "${SCALINGO_POSTGRESQL_URL}" | cut -d "?" -f1 | cut -d "/" -f4 )"
db_url="jdbc:postgresql://${host}:${port}/${database}"

readonly host
readonly port
readonly username
readonly password
readonly database
readonly db_url

cat << EOF > "${build_dir}/.profile.d/050-keycloak.sh"
export KC_DB="${keycloak_db_engine}"
export KC_DB_USERNAME="${username}"
export KC_DB_PASSWORD="${password}"
export KC_DB_URL="${db_url}"
EOF

success


# * * *


start "Building optimized Keycloak image"

if "${keycloak_dir}"/bin/kc.sh build \
    --db="${keycloak_db_engine}" \
    --transaction-xa-enabled="false" \
    2>/dev/null
then
    do_finish
else
    do_fail
    failure
fi

success


# * * *


start "Cleaning up"

do_start "Removing temporary files"

if rm -Rf "${tmp_dir}"
then
    do_finish
else
    do_fail
    failure
fi

success
